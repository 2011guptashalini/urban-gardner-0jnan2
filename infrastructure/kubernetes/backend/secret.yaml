apiVersion: v1
kind: Secret
metadata:
  name: backend-secrets
  namespace: default
  labels:
    app: urban-gardening-assistant
    component: backend
    environment: ${ENV}
    managed-by: terraform
    security-tier: restricted
  annotations:
    secret.kubernetes.io/auto-rotation: "enabled"
    secret.kubernetes.io/rotation-period: "90d"
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "backend-secrets"
    checksum/config: ${CHECKSUM}
    encryption.kubernetes.io/mode: "aes-256"
type: Opaque
stringData:
  # Database credentials - matches DatabaseConfig structure
  db_username: "${DB_USERNAME}"  # Required by config.DatabaseConfig
  db_password: "${DB_PASSWORD}"  # Min 8 chars required per validation
  db_name: "${DB_NAME}"         # Defaults to urban_gardening if not set
  db_host: "${DB_HOST}"         # Defaults to localhost if not set
  db_port: "${DB_PORT}"         # Defaults to 5432 if not set
  db_ssl_mode: "${DB_SSL_MODE}" # One of: disable, require, verify-ca, verify-full

  # Redis credentials - matches RedisConfig structure  
  redis_host: "${REDIS_HOST}"     # Defaults to localhost if not set
  redis_port: "${REDIS_PORT}"     # Defaults to 6379 if not set
  redis_password: "${REDIS_PASSWORD}" # Required for cluster auth
  redis_db: "${REDIS_DB}"         # Defaults to 0 if not set
  redis_tls_enabled: "${REDIS_TLS_ENABLED}" # Enable TLS encryption

  # JWT authentication secret
  jwt_secret: "${JWT_SECRET}" # Required for token signing/verification

  # OpenAI API credentials for gardening recommendations
  openai_api_key: "${OPENAI_API_KEY}" # Required for AI service integration

  # Additional security parameters
  encryption_key: "${ENCRYPTION_KEY}" # AES-256 encryption key
  api_keys: "${API_KEYS}" # Comma-separated list of valid API keys

  # Environment-specific configuration
  environment: "${ENV}" # One of: development, staging, production
  debug_enabled: "${DEBUG_ENABLED}" # Enable debug logging
  feature_flags: "${FEATURE_FLAGS}" # Comma-separated feature toggles

  # Monitoring and observability
  metrics_enabled: "${METRICS_ENABLED}" # Enable Prometheus metrics
  tracing_enabled: "${TRACING_ENABLED}" # Enable distributed tracing

  # Rate limiting configuration
  rate_limit: "${RATE_LIMIT}" # Requests per window
  rate_limit_window: "${RATE_LIMIT_WINDOW}" # Time window for rate limiting

  # Backup and recovery
  backup_encryption_key: "${BACKUP_ENCRYPTION_KEY}" # Backup encryption
  recovery_keys: "${RECOVERY_KEYS}" # Emergency recovery keys