name: Infrastructure Deployment

on:
  push:
    branches: [main, develop]
    paths:
      - 'infrastructure/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        type: choice
        options:
          - staging
          - production
        default: 'staging'
      destroy:
        description: 'Destroy infrastructure'
        required: false
        type: boolean
        default: false
      force_unlock:
        description: 'Force unlock Terraform state'
        required: false
        type: boolean
        default: false

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
  TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
  LOCK_TABLE: ${{ secrets.LOCK_TABLE }}
  COST_THRESHOLD: ${{ secrets.COST_THRESHOLD }}

permissions:
  id-token: write
  contents: read
  pull-requests: write
  deployments: write
  environments: read

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      infrastructure: ${{ steps.filter.outputs.infrastructure }}
    steps:
      - uses: actions/checkout@v3
      
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            infrastructure:
              - 'infrastructure/**'
              - '.github/workflows/infrastructure.yml'

  init:
    name: Initialize Terraform
    needs: changes
    if: needs.changes.outputs.infrastructure == 'true'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || env.ENVIRONMENT }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Initialize Terraform
        working-directory: infrastructure/terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="dynamodb_table=${{ env.LOCK_TABLE }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"

  plan:
    name: Generate Plan
    needs: init
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || env.ENVIRONMENT }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Plan
        working-directory: infrastructure/terraform
        run: |
          terraform plan \
            -var-file="environments/${{ env.ENVIRONMENT }}.tfvars" \
            -detailed-exitcode \
            -out=tfplan \
            -input=false
        continue-on-error: true
        id: plan

      - name: Cost Estimation
        if: steps.plan.outcome == 'success'
        working-directory: infrastructure/terraform
        run: |
          COST_ESTIMATE=$(terraform show -json tfplan | jq -r '.resource_changes[].change.actions[]' | grep -c 'create\|update')
          if [ "$COST_ESTIMATE" -gt "${{ env.COST_THRESHOLD }}" ]; then
            echo "::error::Cost estimate exceeds threshold"
            exit 1
          fi

      - name: Upload Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: infrastructure/terraform/tfplan
          retention-days: 1

  apply:
    name: Apply Changes
    needs: plan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || env.ENVIRONMENT }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Download Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: infrastructure/terraform

      - name: Apply Changes
        working-directory: infrastructure/terraform
        run: |
          if [[ "${{ github.event.inputs.destroy }}" == "true" ]]; then
            terraform destroy -auto-approve -var-file="environments/${{ env.ENVIRONMENT }}.tfvars"
          else
            terraform apply -auto-approve tfplan
          fi

  verify:
    name: Verify Deployment
    needs: apply
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || env.ENVIRONMENT }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify EKS Cluster
        run: |
          aws eks describe-cluster \
            --name urban-gardening-${{ env.ENVIRONMENT }} \
            --query 'cluster.status' \
            --output text | grep -q "ACTIVE"

      - name: Verify RDS Instance
        run: |
          aws rds describe-db-instances \
            --db-instance-identifier urban-garden-${{ env.ENVIRONMENT }} \
            --query 'DBInstances[0].DBInstanceStatus' \
            --output text | grep -q "available"

      - name: Verify Redis Cluster
        run: |
          aws elasticache describe-cache-clusters \
            --cache-cluster-id urban-garden-cache-${{ env.ENVIRONMENT }} \
            --query 'CacheClusters[0].CacheClusterStatus' \
            --output text | grep -q "available"

      - name: Update DNS Records
        if: env.ENVIRONMENT == 'production'
        run: |
          aws route53 change-resource-record-sets \
            --hosted-zone-id ${{ secrets.HOSTED_ZONE_ID }} \
            --change-batch file://infrastructure/dns/update-records.json