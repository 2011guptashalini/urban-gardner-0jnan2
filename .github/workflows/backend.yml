name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - development
          - staging 
          - production

env:
  GO_VERSION: '1.21'
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  COVERAGE_THRESHOLD: 80
  MAX_RETRIES: 3
  HEALTH_CHECK_TIMEOUT: 300
  VULNERABILITY_THRESHOLD: 'high'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: urban_garden_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          cd src/backend
          go mod download
          go mod verify

      - name: Run static code analysis
        run: |
          cd src/backend
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run -c .golangci.yml ./...

      - name: Run unit tests
        run: |
          cd src/backend
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./... -tags=unit

      - name: Run integration tests
        run: |
          cd src/backend
          go test -v ./... -tags=integration

      - name: Check test coverage
        run: |
          cd src/backend
          go tool cover -func=coverage.out | awk 'END { if ($3 < '${{ env.COVERAGE_THRESHOLD }}') { exit 1 } }'

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: src/backend/test_output/

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and scan calculator service
        uses: docker/build-push-action@v4
        with:
          context: src/backend
          file: src/backend/Dockerfile
          target: calculator
          push: false
          tags: ${{ env.DOCKER_REGISTRY }}/calculator:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and scan crop manager service
        uses: docker/build-push-action@v4
        with:
          context: src/backend
          file: src/backend/Dockerfile
          target: cropmanager
          push: false
          tags: ${{ env.DOCKER_REGISTRY }}/cropmanager:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and scan scheduler service
        uses: docker/build-push-action@v4
        with:
          context: src/backend
          file: src/backend/Dockerfile
          target: scheduler
          push: false
          tags: ${{ env.DOCKER_REGISTRY }}/scheduler:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan for vulnerabilities
        uses: aquasecurity/trivy-action@v1
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/calculator:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: ${{ env.VULNERABILITY_THRESHOLD }}

      - name: Push images on success
        if: success()
        run: |
          docker push ${{ env.DOCKER_REGISTRY }}/calculator:${{ github.sha }}
          docker push ${{ env.DOCKER_REGISTRY }}/cropmanager:${{ github.sha }}
          docker push ${{ env.DOCKER_REGISTRY }}/scheduler:${{ github.sha }}

  deploy:
    name: Deploy
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure Kubernetes
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Validate Kubernetes manifests
        run: |
          kubectl apply --dry-run=client -f k8s/

      - name: Take pre-deployment backup
        run: |
          ./scripts/backup.sh

      - name: Apply database migrations
        run: |
          cd src/backend
          ./scripts/migrate.sh up

      - name: Deploy services
        run: |
          kubectl apply -f k8s/
          kubectl rollout status deployment/calculator
          kubectl rollout status deployment/cropmanager
          kubectl rollout status deployment/scheduler

      - name: Health check
        run: |
          timeout ${{ env.HEALTH_CHECK_TIMEOUT }} bash -c '
          until curl -f http://calculator-service/health && \
                curl -f http://cropmanager-service/health && \
                curl -f http://scheduler-service/health; do
            sleep 5
          done'

      - name: Rollback on failure
        if: failure()
        run: |
          kubectl rollout undo deployment/calculator
          kubectl rollout undo deployment/cropmanager
          kubectl rollout undo deployment/scheduler